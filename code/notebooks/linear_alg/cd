{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python For Linear Algebra\n",
    "\n",
    "### Author: Santosh Muthireddy\n",
    "\n",
    "# Requirements\n",
    "* Numpy\n",
    "* python3\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Go through the previous content of python for linear algebra\n",
    "In this we focus on \n",
    "* ndarray\n",
    "* Arithmetic operations\n",
    "* Indexing\n",
    "* Slicing\n",
    "\n",
    "## Different ways to initialise and declare a numpy array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to print 1d array\n",
    "def print_array_1d(arr):\n",
    "    print(\"data:\",arr)\n",
    "    print(\"array type:\",type(arr))\n",
    "    print(\"data type:\",type(arr[0]))\n",
    "    print(\"shape:\",arr.shape)\n",
    "    print(\"--------------------\")\n",
    "    \n",
    "# Function to print 2d array    \n",
    "def print_array_2d(arr):\n",
    "    print(\"data:\",arr)\n",
    "    print(\"array type:\",type(arr))\n",
    "    print(\"data type:\",type(arr[0][0]))\n",
    "    print(\"shape:\",arr.shape)\n",
    "    print(\"--------------------\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1D array, int\n",
    "arr1 = np.array([1,2,3,4,5])\n",
    "print_array_1d(arr1)\n",
    "\n",
    "\n",
    "#1D array, float\n",
    "arr2 = np.array([0.1,0.5,0.9,2.3])\n",
    "print_array_1d(arr2)\n",
    "\n",
    "#1D array, defining dtype\n",
    "arr1 = np.array([1,2,3,4,5],dtype=np.float)\n",
    "print_array_1d(arr1)\n",
    "\n",
    "arr2 = np.array([0.1,0.5,0.9,2.3],dtype=np.int)\n",
    "print_array_1d(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2D array, int\n",
    "arr1 = np.array([[1,2],[3,4],[5,6]])\n",
    "print_array_2d(arr1)\n",
    "\n",
    "#2D array, float\n",
    "arr2 = np.array([[0.1,0.5],[0.9,2.3]])\n",
    "print_array_1d(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Making 2D array from 1D array\n",
    "#numpy reshape can be used to change the shape of the array\n",
    "arr1 = np.array([1,2,3,4,5,6])\n",
    "print_array_1d(arr1)\n",
    "arr1 = np.reshape(arr1,(3,2))\n",
    "print_array_2d(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using np.arange(), returns evenly spaced values in given interval\n",
    "#Generating numpy array with step 1\n",
    "arr1 = np.arange(6)\n",
    "print_array_1d(arr1)\n",
    "\n",
    "arr1 = np.arange(2,6)\n",
    "print_array_1d(arr1)\n",
    "# Generating numpy array with step 0.5\n",
    "arr1 = np.arange(0,6,0.2)\n",
    "print_array_1d(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using np.linspace(), returns evenly spaced numbers over speified interval\n",
    "#Generating numpy array\n",
    "arr1 = np.linspace(0,6,num=10)\n",
    "print_array_1d(arr1)\n",
    "\n",
    "arr1 = np.linspace(0,6,num=10,endpoint=False)\n",
    "print_array_1d(arr1)\n",
    "\n",
    "arr1 = np.linspace(0,6,num=10,endpoint=False,retstep=True)\n",
    "print(arr1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Array with ones\n",
    "arr1 = np.ones((3,3))\n",
    "print_array_2d(arr1)\n",
    "\n",
    "# Array with zeros\n",
    "arr1 = np.zeros((3,3),dtype=np.int)\n",
    "print_array_2d(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generating random array\n",
    "arr1 = np.random.rand(6)\n",
    "print_array_1d(arr1)\n",
    "\n",
    "arr1 = np.random.rand(3,2)\n",
    "print_array_2d(arr1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Slicing numpy array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "start = 3\n",
    "end = 7\n",
    "arr1 = np.arange(10)\n",
    "print(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#slicing till a point from start\n",
    "print(arr1[:end])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#slicing from a point to end\n",
    "print(arr1[start:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#slicing between points\n",
    "print(arr1[start:end])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#every number with n skips\n",
    "n = 2\n",
    "print(arr1[::n])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reverse\n",
    "print(arr1[::-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Indexing numpy array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generate random array with integers\n",
    "arr1 = np.random.randint(40,size=(4,3))\n",
    "print(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extract rows\n",
    "n = 1\n",
    "arr1[:n,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extract columns\n",
    "n=1\n",
    "arr1[:,:n]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 3\n",
    "m = 2\n",
    "arr1[:n,:m]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Arithmetic operations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Application of what we learnt until now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function to plot vector\n",
    "def draw_vector(start,end):\n",
    "    plt.plot((start[0],end[0]),(start[1],end[1]))\n",
    "    plt.draw()\n",
    "    \n",
    "#Function to plot position\n",
    "def plot_position(position,name):\n",
    "    if name == \"wall-e\":\n",
    "        plt.scatter(position[0],position[1],s=200,marker=(4, 0, 45))\n",
    "    elif name == \"eva\":\n",
    "        plt.scatter(position[0],position[1],s=100,marker='x')\n",
    "    elif name == \"auto\":\n",
    "        plt.scatter(position[0],position[1],s=100,marker='o')\n",
    "    elif name == \"plant\":\n",
    "        plt.scatter(position[0],position[1],s=100,marker='+')\n",
    "        \n",
    "        \n",
    "    plt.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#origin\n",
    "origin = np.array([0,0])\n",
    "\n",
    "#initial position of wall\n",
    "# init wall e position with [5,4]\n",
    "init_point = np.array([5,4])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vector addition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#move the wall e by given vector\n",
    "transform = np.array([3,-2])\n",
    "\n",
    "#YOUR CODE HERE\n",
    "final_position = \n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.xlim(0,10)\n",
    "plt.ylim(0,10)\n",
    "#add the grid\n",
    "plt.grid()\n",
    "\n",
    "draw_vector(origin,init_point)\n",
    "plot_position(init_point,\"wall-e\")\n",
    "draw_vector(init_point,final_position)\n",
    "plot_position(final_position,\"wall-e\")\n",
    "draw_vector(origin,final_position)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Polar to Cartesian coordinate system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#init magnitude and direction\n",
    "l = 3.6\n",
    "theta = -33.7 # in degrees\n",
    "\n",
    "#YOUR CODE HERE\n",
    "translated_position = \n",
    "\n",
    "final_position = \n",
    "print(\"final position \",np.round(final_position,2))\n",
    "# Plotting\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.xlim(0,10)\n",
    "plt.ylim(0,10)\n",
    "#add the grid\n",
    "plt.grid()\n",
    "\n",
    "draw_vector(origin,init_point)\n",
    "plot_position(init_point,\"wall-e\")\n",
    "draw_vector(init_point,final_position)\n",
    "plot_position(final_position,\"wall-e\")\n",
    "draw_vector(origin,final_position)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Relative Positioning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#init magnitude and direction\n",
    "l = 5.65\n",
    "theta = 45 # in degrees\n",
    "wall_e_init_position = \n",
    "#YOUR CODE HERE\n",
    "eva_translated_position = \n",
    "\n",
    "eva_final_position = \n",
    "print(\"translation \",np.round(eva_translated_position,2))\n",
    "print(\"final position \",np.round(eva_final_position,2))\n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.xlim(0,15)\n",
    "plt.ylim(0,15)\n",
    "#add the grid\n",
    "plt.grid()\n",
    "\n",
    "draw_vector(origin,wall_e_init_position)\n",
    "plot_position(wall_e_init_position,\"wall-e\")\n",
    "draw_vector(wall_e_init_position,eva_final_position)\n",
    "plot_position(eva_final_position,\"eva\")\n",
    "draw_vector(origin,eva_final_position)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#init various positions\n",
    "wall_final_position = np.array([8,2])\n",
    "eva_final_position = np.array([12,6])\n",
    "auto_final_position = np.array([11,8])\n",
    "plant_final_position = np.array([4,9])\n",
    "\n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.xlim(0,15)\n",
    "plt.ylim(0,15)\n",
    "#add the grid\n",
    "plt.grid()\n",
    "\n",
    "draw_vector(origin,wall_final_position)\n",
    "plot_position(wall_e_init_position,\"wall-e\")\n",
    "draw_vector(origin,eva_final_position)\n",
    "plot_position(eva_final_position,\"eva\")\n",
    "draw_vector(origin,eva_final_position)\n",
    "plot_position(plant_final_position,\"plant\")\n",
    "draw_vector(origin,plant_final_position)\n",
    "plot_position(auto_final_position,\"auto\")\n",
    "draw_vector(origin,auto_final_position)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#scalling\n",
    "scaling_factor = \n",
    "scaled_wall_final_position = \n",
    "scaled_eva_final_position =\n",
    "scaled_auto_final_position = \n",
    "scaled_plant_final_position = \n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.xlim(0,15)\n",
    "plt.ylim(0,15)\n",
    "#add the grid\n",
    "plt.grid()\n",
    "\n",
    "draw_vector(origin,scaled_wall_final_position)\n",
    "plot_position(scaled_wall_final_position,\"wall-e\")\n",
    "draw_vector(origin,scaled_eva_final_position)\n",
    "plot_position(scaled_eva_final_position,\"eva\")\n",
    "draw_vector(origin,scaled_eva_final_position)\n",
    "plot_position(scaled_plant_final_position,\"plant\")\n",
    "draw_vector(origin,scaled_plant_final_position)\n",
    "plot_position(scaled_auto_final_position,\"auto\")\n",
    "draw_vector(origin,scaled_auto_final_position)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Matrix manipulations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wall_e_init_position = np.array([0,0])\n",
    "eva_init_position = np.array([5,4])\n",
    "\n",
    "#basis vectors\n",
    "init_base_x = \n",
    "init_base_y = \n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.xlim(-10,10)\n",
    "plt.ylim(-10,10)\n",
    "#add the grid\n",
    "plt.grid()\n",
    "plt.plot([-10,10],[0,0],color='black',alpha=0.5)\n",
    "plt.plot([0,0],[-10,10],color='black',alpha=0.5)\n",
    "plot_position(wall_e_init_position,\"wall-e\")\n",
    "draw_vector(wall_e_init_position,eva_init_position)\n",
    "plot_position(eva_init_position,\"eva\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#rotation angle\n",
    "theta = -45 #in degrees\n",
    "l = 1 #unit length of basis vector\n",
    "rotated_base_x = \n",
    "rotated_base_y = \n",
    "\n",
    "rotation_matrix = \n",
    "eva_relative_position = \n",
    "\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.xlim(-10,10)\n",
    "plt.ylim(-10,10)\n",
    "plt.grid()\n",
    "plt.scatter(0,0,s=200,marker=(4, 0, 90))\n",
    "plt.scatter(eva_init_position[0],eva_init_position[1],marker='x')\n",
    "plt.plot([-10,10],[0,0],color='black',alpha=0.5)\n",
    "plt.plot([0,0],[-10,10],color='black',alpha=0.5)\n",
    "plt.plot([-10,10],[-10,10],color='red',alpha=0.5)\n",
    "plt.plot([-10,10],[10,-10],color='red',alpha=0.5)\n",
    "\n",
    "draw_vector(origin,eva_init_position)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Inverse matrix\n",
    "inverse_matrix = \n",
    "\n",
    "eva_init_position = \n",
    "\n",
    "print('Initial Position of Eva: ', eva_init_position)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Composition\n",
    "final_matrix = \n",
    "\n",
    "eva_relative_position = \n",
    "\n",
    "print('Relative Position of Eva: ', eva_relative_position)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# System of Equations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Equation 1: 3x + 2y = 4\n",
    "# Equation 2: x - 4y = -1\n",
    "# Start Code Here\n",
    "A = \n",
    "B = \n",
    "X = \n",
    "print('Solution: ', X)\n",
    "# End Code Here\n",
    "plt.figure(figsize=(10,10))\n",
    "x1 = np.arange(-7, 7, .5)\n",
    "y1 = (4 - 3 * x1) / 2\n",
    "y2 = (1 + x1) / 4\n",
    "plt.grid()\n",
    "plt.xlim((-6, 6))\n",
    "plt.ylim((-6, 6))\n",
    "plt.plot(x1, y1, color = 'r')\n",
    "plt.plot(x1, y2, color = 'b')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determinant\n",
    "A = np.array([[1, 0], [0, 1]])\n",
    "B = np.array([[1, 1], [2, 2]])\n",
    "C = np.array([[0, 0], [0, 0]])\n",
    "\n",
    "determinant = \n",
    "\n",
    "print('Determinant: ', determinant)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rank of matrix\n",
    "rank = \n",
    "\n",
    "print('Rank: ',rank)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
